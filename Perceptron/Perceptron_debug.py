import numpy as np 
import matplotlib.pyplot as plt
from scipy.spatial.distance import cdist
np.random.seed(2)

print("=== B∆Ø·ªöC 1: T·∫†O D·ªÆ LI·ªÜU ===")
print("=== STEP 1: CREATE DATA ===")

means = [[2, 2], [4, 2]]
cov = [[.3, .2], [.2, .3]]
N = 10

print(f"T·∫°o {N} m·∫´u cho m·ªói l·ªõp / Create {N} samples for each class")
print(f"L·ªõp 0: mean = {means[0]}, cov = {cov}")
print(f"L·ªõp 1: mean = {means[1]}, cov = {cov}")

X0 = np.random.multivariate_normal(means[0], cov, N).T
X1 = np.random.multivariate_normal(means[1], cov, N).T

print(f"\nX0 shape: {X0.shape} (2 features, {N} samples)")
print(f"X1 shape: {X1.shape} (2 features, {N} samples)")

print(f"\nX0 (5 m·∫´u ƒë·∫ßu):")
print(X0[:, :5])
print(f"\nX1 (5 m·∫´u ƒë·∫ßu):")
print(X1[:, :5])

print("\n=== B∆Ø·ªöC 2: GH√âP D·ªÆ LI·ªÜU ===")
print("=== STEP 2: COMBINE DATA ===")

X = np.concatenate((X0, X1), axis = 1)
print(f"X shape sau khi gh√©p: {X.shape}")
print(f"X (5 c·ªôt ƒë·∫ßu):")
print(X[:, :5])

y = np.concatenate((np.ones((1, N)), -1*np.ones((1, N))), axis = 1)
print(f"\ny shape: {y.shape}")
print(f"y (10 ph·∫ßn t·ª≠ ƒë·∫ßu): {y[0, :10]}")

print("\n=== B∆Ø·ªöC 3: TH√äM BIAS TERM ===")
print("=== STEP 3: ADD BIAS TERM ===")

X = np.concatenate((np.ones((1, 2*N)), X), axis = 0)
print(f"X shape sau khi th√™m bias: {X.shape}")
print(f"X (5 c·ªôt ƒë·∫ßu):")
print(X[:, :5])

print("\n=== B∆Ø·ªöC 4: ƒê·ªäNH NGHƒ®A C√ÅC H√ÄM ===")
print("=== STEP 4: DEFINE FUNCTIONS ===")

def h(w, x):    
    result = np.sign(np.dot(w.T, x))
    print(f"h(w, x) = sign({np.dot(w.T, x)[0,0]:.3f}) = {result[0,0]}")
    return result

def h_silent(w, x):    
    """H√†m h kh√¥ng in ra m√†n h√¨nh / Silent version of h function"""
    result = np.sign(np.dot(w.T, x))
    return result

def has_converged(X, y, w):    
    print("üîç Ki·ªÉm tra h·ªôi t·ª•... / Checking convergence...")
    predictions = h_silent(w, X)  # Kh√¥ng in ra t·ª´ng m·∫´u
    is_equal = np.array_equal(predictions, y)
    print(f"T·∫•t c·∫£ d·ª± ƒëo√°n ƒë√∫ng? {is_equal}")
    if is_equal:
        print("‚úÖ T·∫§T C·∫¢ M·∫™U ƒê∆Ø·ª¢C PH√ÇN LO·∫†I ƒê√öNG!")
    else:
        print("‚ùå V·∫™N C√ì M·∫™U B·ªä SAI, TI·∫æP T·ª§C H·ªåC...")
    return is_equal

def perceptron_debug(X, y, w_init):
    print("\n=== B·∫ÆT ƒê·∫¶U THU·∫¨T TO√ÅN PERCEPTRON ===")
    print("=== START PERCEPTRON ALGORITHM ===")
    
    w = [w_init]
    N = X.shape[1]
    d = X.shape[0]
    mis_points = []
    
    print(f"N = {N} (s·ªë m·∫´u), d = {d} (s·ªë chi·ªÅu)")
    print(f"w_init: {w_init.flatten()}")
    
    iteration = 0
    while True:
        iteration += 1
        print(f"\n--- L·∫¶N L·∫∂P {iteration} ---")
        print(f"--- ITERATION {iteration} ---")
        
        # mix data 
        mix_id = np.random.permutation(N)
        print(f"Th·ª© t·ª± x·ª≠ l√Ω m·∫´u: {mix_id}")
        
        mis_count = 0
        for i in range(N):
            xi = X[:, mix_id[i]].reshape(d, 1)
            yi = y[0, mix_id[i]]
            
            print(f"\nM·∫´u {mix_id[i]}: xi = {xi.flatten()}, yi = {yi}")
            
            prediction = h(w[-1], xi)[0]
            if prediction != yi:
                print(f"‚ùå PH√ÇN LO·∫†I SAI! D·ª± ƒëo√°n: {prediction}, Th·ª±c t·∫ø: {yi}")
                mis_points.append(mix_id[i])
                mis_count += 1
                
                w_new = w[-1] + yi*xi 
                print(f"C·∫≠p nh·∫≠t w: {w[-1].flatten()} + {yi}*{xi.flatten()} = {w_new.flatten()}")
                w.append(w_new)
            else:
                print(f"‚úÖ PH√ÇN LO·∫†I ƒê√öNG! D·ª± ƒëo√°n: {prediction}, Th·ª±c t·∫ø: {yi}")
        
        print(f"S·ªë m·∫´u sai trong l·∫ßn l·∫∑p n√†y: {mis_count}")
        
        if has_converged(X, y, w[-1]):
            print(f"\nüéâ H·ªòI T·ª§ SAU {iteration} L·∫¶N L·∫∂P!")
            break
            
        if iteration > 10:  # Tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n
            print("‚ö†Ô∏è D·ª´ng sau 10 l·∫ßn l·∫∑p ƒë·ªÉ tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n")
            break
    
    return (w, mis_points)

print("\n=== B∆Ø·ªöC 5: CH·∫†Y THU·∫¨T TO√ÅN ===")
print("=== STEP 5: RUN ALGORITHM ===")

d = X.shape[0]
w_init = np.random.randn(d, 1)
(w, m) = perceptron_debug(X, y, w_init)

print(f"\n=== K·∫æT QU·∫¢ CU·ªêI C√ôNG ===")
print(f"=== FINAL RESULT ===")
print(f"w cu·ªëi c√πng: {w[-1].flatten()}")
print(f"S·ªë l·∫ßn c·∫≠p nh·∫≠t: {len(w)-1}")
print(f"C√°c m·∫´u b·ªã sai: {m}") 