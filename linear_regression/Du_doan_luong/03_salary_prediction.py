# ========================================
# SALARY PREDICTION WITH LINEAR REGRESSION
# D·ª∞ ƒêO√ÅN L∆Ø∆†NG V·ªöI H·ªíI QUY TUY·∫æN T√çNH
# ========================================

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
import warnings
warnings.filterwarnings('ignore')

# ========================================
# PH·∫¶N 1: T·∫†O D·ªÆ LI·ªÜU L∆Ø∆†NG / PART 1: CREATE SALARY DATA
# ========================================

def create_salary_data(n_samples=200, noise_level=0.1):
    """
    T·∫°o d·ªØ li·ªáu l∆∞∆°ng d·ª±a tr√™n nƒÉm kinh nghi·ªám
    Create salary data based on years of experience
    
    Args:
        n_samples (int): S·ªë l∆∞·ª£ng m·∫´u / Number of samples
        noise_level (float): M·ª©c ƒë·ªô nhi·ªÖu / Noise level
    
    Returns:
        pd.DataFrame: D·ªØ li·ªáu l∆∞∆°ng / Salary data
    """
    np.random.seed(42)
    
    # T·∫°o nƒÉm kinh nghi·ªám (0-20 nƒÉm) / Create years of experience (0-20 years)
    years_experience = np.random.uniform(0, 20, n_samples)
    
    # T·∫°o l∆∞∆°ng c∆° b·∫£n v·ªõi c√¥ng th·ª©c th·ª±c t·∫ø / Create base salary with realistic formula
    # L∆∞∆°ng = 30000 + 5000 * nƒÉm kinh nghi·ªám + nhi·ªÖu
    # Salary = 30000 + 5000 * years + noise
    base_salary = 30000  # L∆∞∆°ng kh·ªüi ƒëi·ªÉm (USD) / Starting salary (USD)
    salary_increase = 5000  # TƒÉng l∆∞∆°ng m·ªói nƒÉm (USD) / Salary increase per year (USD)
    
    # T·∫°o l∆∞∆°ng v·ªõi nhi·ªÖu / Create salary with noise
    noise = np.random.normal(0, base_salary * noise_level, n_samples)
    salary = base_salary + salary_increase * years_experience + noise
    
    # ƒê·∫£m b·∫£o l∆∞∆°ng kh√¥ng √¢m / Ensure salary is not negative
    salary = np.maximum(salary, 20000)
    
    # T·∫°o DataFrame
    data = pd.DataFrame({
        'years_experience': years_experience,
        'salary': salary
    })
    
    return data

def explore_salary_data(data):
    """Kh√°m ph√° d·ªØ li·ªáu l∆∞∆°ng / Explore salary data"""
    print("=== KH√ÅM PH√Å D·ªÆ LI·ªÜU L∆Ø∆†NG ===")
    print("=== EXPLORE SALARY DATA ===")
    
    print(f"üìä K√≠ch th∆∞·ªõc d·ªØ li·ªáu / Data shape: {data.shape}")
    print(f"üìã 5 m·∫´u ƒë·∫ßu ti√™n / First 5 samples:")
    print(data.head())
    
    print(f"\nüìà Th·ªëng k√™ m√¥ t·∫£ / Descriptive statistics:")
    print(data.describe())
    
    # V·∫Ω bi·ªÉu ƒë·ªì ph√¢n ph·ªëi / Plot distributions
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
    
    # Histogram nƒÉm kinh nghi·ªám / Years of experience histogram
    ax1.hist(data['years_experience'], bins=20, alpha=0.7, color='skyblue', edgecolor='black')
    ax1.set_xlabel('NƒÉm kinh nghi·ªám / Years of Experience')
    ax1.set_ylabel('T·∫ßn su·∫•t / Frequency')
    ax1.set_title('Ph√¢n ph·ªëi nƒÉm kinh nghi·ªám\nDistribution of Years of Experience')
    ax1.grid(True, alpha=0.3)
    
    # Histogram l∆∞∆°ng / Salary histogram
    ax2.hist(data['salary'], bins=20, alpha=0.7, color='lightgreen', edgecolor='black')
    ax2.set_xlabel('L∆∞∆°ng (USD) / Salary (USD)')
    ax2.set_ylabel('T·∫ßn su·∫•t / Frequency')
    ax2.set_title('Ph√¢n ph·ªëi l∆∞∆°ng\nDistribution of Salary')
    ax2.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('salary_data_distribution.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    # V·∫Ω scatter plot / Plot scatter
    plt.figure(figsize=(10, 6))
    plt.scatter(data['years_experience'], data['salary'], alpha=0.6, color='blue')
    plt.xlabel('NƒÉm kinh nghi·ªám / Years of Experience')
    plt.ylabel('L∆∞∆°ng (USD) / Salary (USD)')
    plt.title('M·ªëi quan h·ªá: L∆∞∆°ng vs NƒÉm kinh nghi·ªám\nRelationship: Salary vs Years of Experience')
    plt.grid(True, alpha=0.3)
    plt.savefig('salary_vs_experience.png', dpi=300, bbox_inches='tight')
    plt.show()

# ========================================
# PH·∫¶N 2: HU·∫§N LUY·ªÜN M√î H√åNH / PART 2: TRAIN MODEL
# ========================================

def train_salary_model(data):
    """
    Hu·∫•n luy·ªán m√¥ h√¨nh Linear Regression cho d·ª± ƒëo√°n l∆∞∆°ng
    Train Linear Regression model for salary prediction
    """
    print("\n=== HU·∫§N LUY·ªÜN M√î H√åNH LINEAR REGRESSION ===")
    print("=== TRAIN LINEAR REGRESSION MODEL ===")
    
    # Chu·∫©n b·ªã d·ªØ li·ªáu / Prepare data
    X = data[['years_experience']].values
    y = data['salary'].values
    
    # Chia d·ªØ li·ªáu / Split data
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )
    
    print(f"üî¢ K√≠ch th∆∞·ªõc d·ªØ li·ªáu / Data sizes:")
    print(f"   Training: {X_train.shape[0]} m·∫´u / samples")
    print(f"   Testing: {X_test.shape[0]} m·∫´u / samples")
    
    # Hu·∫•n luy·ªán m√¥ h√¨nh / Train model
    model = LinearRegression()
    model.fit(X_train, y_train)
    
    # D·ª± ƒëo√°n / Predict
    y_pred = model.predict(X_test)
    
    return model, X_train, X_test, y_train, y_test, y_pred

# ========================================
# PH·∫¶N 3: SO S√ÅNH HI·ªÜU SU·∫§T V·ªöI C√ÅC METRICS KH√ÅC NHAU
# PART 3: COMPARE PERFORMANCE WITH DIFFERENT METRICS
# ========================================

def compare_performance_metrics(y_test, y_pred):
    """
    So s√°nh hi·ªáu su·∫•t v·ªõi c√°c metrics kh√°c nhau
    Compare performance with different metrics
    """
    print("\n=== SO S√ÅNH HI·ªÜU SU·∫§T V·ªöI C√ÅC METRICS KH√ÅC NHAU ===")
    print("=== COMPARE PERFORMANCE WITH DIFFERENT METRICS ===")
    
    # T√≠nh c√°c metrics / Calculate metrics
    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    
    # T√≠nh MAPE (Mean Absolute Percentage Error)
    mape = np.mean(np.abs((y_test - y_pred) / y_test)) * 100
    
    print("üìä C√°c metrics ƒë√°nh gi√° m√¥ h√¨nh / Model evaluation metrics:")
    print(f"   Mean Squared Error (MSE): {mse:,.2f}")
    print(f"   Root Mean Squared Error (RMSE): {rmse:,.2f}")
    print(f"   Mean Absolute Error (MAE): {mae:,.2f}")
    print(f"   Mean Absolute Percentage Error (MAPE): {mape:.2f}%")
    print(f"   R¬≤ Score: {r2:.4f}")
    
    # Gi·∫£i th√≠ch √Ω nghƒ©a / Explain meanings
    print(f"\nüí° Gi·∫£i th√≠ch √Ω nghƒ©a / Interpretation:")
    print(f"   - MSE: Sai s·ªë b√¨nh ph∆∞∆°ng trung b√¨nh (c√†ng th·∫•p c√†ng t·ªët)")
    print(f"     MSE: Mean squared error (lower is better)")
    print(f"   - RMSE: Sai s·ªë trung b√¨nh (c√πng ƒë∆°n v·ªã v·ªõi l∆∞∆°ng)")
    print(f"     RMSE: Root mean squared error (same unit as salary)")
    print(f"   - MAE: Sai s·ªë tuy·ªát ƒë·ªëi trung b√¨nh (d·ªÖ hi·ªÉu h∆°n)")
    print(f"     MAE: Mean absolute error (easier to understand)")
    print(f"   - MAPE: Sai s·ªë ph·∫ßn trƒÉm trung b√¨nh (so s√°nh t∆∞∆°ng ƒë·ªëi)")
    print(f"     MAPE: Mean absolute percentage error (relative comparison)")
    print(f"   - R¬≤: H·ªá s·ªë x√°c ƒë·ªãnh (0-1, c√†ng cao c√†ng t·ªët)")
    print(f"     R¬≤: Coefficient of determination (0-1, higher is better)")
    
    return {
        'MSE': mse,
        'RMSE': rmse,
        'MAE': mae,
        'MAPE': mape,
        'R2': r2
    }

def visualize_model_results(model, data, X_test, y_test, y_pred):
    """Tr·ª±c quan h√≥a k·∫øt qu·∫£ m√¥ h√¨nh / Visualize model results"""
    print("\n=== TR·ª∞C QUAN H√ìA K·∫æT QU·∫¢ M√î H√åNH ===")
    print("=== VISUALIZE MODEL RESULTS ===")
    
    # T·∫°o figure v·ªõi 2 subplot / Create figure with 2 subplots
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
    
    # Plot 1: D·ªØ li·ªáu v√† ƒë∆∞·ªùng h·ªìi quy / Plot 1: Data and regression line
    ax1.scatter(data['years_experience'], data['salary'], alpha=0.6, 
                label='D·ªØ li·ªáu th·ª±c t·∫ø / Actual data', color='blue')
    
    # V·∫Ω ƒë∆∞·ªùng h·ªìi quy / Draw regression line
    years_range = np.linspace(data['years_experience'].min(), 
                             data['years_experience'].max(), 100)
    salary_pred = model.predict(years_range.reshape(-1, 1))
    ax1.plot(years_range, salary_pred, 'r-', linewidth=3, 
             label='ƒê∆∞·ªùng h·ªìi quy / Regression line')
    
    ax1.set_xlabel('NƒÉm kinh nghi·ªám / Years of Experience')
    ax1.set_ylabel('L∆∞∆°ng (USD) / Salary (USD)')
    ax1.set_title('H·ªìi quy tuy·∫øn t√≠nh: L∆∞∆°ng vs NƒÉm kinh nghi·ªám\nLinear Regression: Salary vs Years of Experience')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # Plot 2: So s√°nh d·ª± ƒëo√°n vs th·ª±c t·∫ø / Plot 2: Predicted vs Actual
    ax2.scatter(y_test, y_pred, alpha=0.6, color='green')
    ax2.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 
             'r--', lw=2, label='ƒê∆∞·ªùng ho√†n h·∫£o / Perfect line')
    ax2.set_xlabel('L∆∞∆°ng th·ª±c t·∫ø / Actual Salary')
    ax2.set_ylabel('L∆∞∆°ng d·ª± ƒëo√°n / Predicted Salary')
    ax2.set_title('D·ª± ƒëo√°n vs Th·ª±c t·∫ø\nPredicted vs Actual')
    ax2.legend()
    ax2.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('salary_model_results.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    # Hi·ªÉn th·ªã th√¥ng tin m√¥ h√¨nh / Display model information
    print(f"\nüìà Th√¥ng tin m√¥ h√¨nh / Model information:")
    print(f"   H·ªá s·ªë g√≥c / Slope (Œ≤‚ÇÅ): {model.coef_[0]:.2f}")
    print(f"   H·ªá s·ªë t·ª± do / Intercept (Œ≤‚ÇÄ): {model.intercept_:.2f}")
    print(f"   C√¥ng th·ª©c: L∆∞∆°ng = {model.intercept_:.0f} + {model.coef_[0]:.0f} √ó NƒÉm kinh nghi·ªám")
    print(f"   Formula: Salary = {model.intercept_:.0f} + {model.coef_[0]:.0f} √ó Years of Experience")

# ========================================
# PH·∫¶N 4: TH·ª¨ NGHI·ªÜM V·ªöI D·ªÆ LI·ªÜU C√ì NHI·ªÑU KH√ÅC NHAU
# PART 4: EXPERIMENT WITH DIFFERENT NOISE LEVELS
# ========================================

def experiment_with_noise_levels():
    """
    Th·ª≠ nghi·ªám v·ªõi c√°c m·ª©c nhi·ªÖu kh√°c nhau
    Experiment with different noise levels
    """
    print("\n=== TH·ª¨ NGHI·ªÜM V·ªöI M·ª®C NHI·ªÑU KH√ÅC NHAU ===")
    print("=== EXPERIMENT WITH DIFFERENT NOISE LEVELS ===")
    
    noise_levels = [0.05, 0.1, 0.2, 0.3]  # 5%, 10%, 20%, 30%
    results = []
    
    for noise in noise_levels:
        print(f"\nüî¨ Th·ª≠ nghi·ªám v·ªõi nhi·ªÖu {noise*100}% / Testing with {noise*100}% noise")
        
        # T·∫°o d·ªØ li·ªáu v·ªõi m·ª©c nhi·ªÖu kh√°c nhau / Create data with different noise
        data = create_salary_data(n_samples=200, noise_level=noise)
        
        # Hu·∫•n luy·ªán m√¥ h√¨nh / Train model
        model, X_train, X_test, y_train, y_test, y_pred = train_salary_model(data)
        
        # ƒê√°nh gi√° hi·ªáu su·∫•t / Evaluate performance
        metrics = compare_performance_metrics(y_test, y_pred)
        metrics['noise_level'] = noise
        results.append(metrics)
    
    # So s√°nh k·∫øt qu·∫£ / Compare results
    print(f"\nüìä SO S√ÅNH K·∫æT QU·∫¢ THEO M·ª®C NHI·ªÑU ===")
    print(f"üìä COMPARISON BY NOISE LEVEL ===")
    
    results_df = pd.DataFrame(results)
    print(results_df.round(4))
    
    # V·∫Ω bi·ªÉu ƒë·ªì so s√°nh / Plot comparison
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 10))
    
    # R¬≤ Score
    ax1.plot(results_df['noise_level']*100, results_df['R2'], 'bo-', linewidth=2, markersize=8)
    ax1.set_xlabel('M·ª©c nhi·ªÖu (%) / Noise Level (%)')
    ax1.set_ylabel('R¬≤ Score')
    ax1.set_title('R¬≤ Score vs Noise Level')
    ax1.grid(True, alpha=0.3)
    
    # RMSE
    ax2.plot(results_df['noise_level']*100, results_df['RMSE'], 'ro-', linewidth=2, markersize=8)
    ax2.set_xlabel('M·ª©c nhi·ªÖu (%) / Noise Level (%)')
    ax2.set_ylabel('RMSE')
    ax2.set_title('RMSE vs Noise Level')
    ax2.grid(True, alpha=0.3)
    
    # MAE
    ax3.plot(results_df['noise_level']*100, results_df['MAE'], 'go-', linewidth=2, markersize=8)
    ax3.set_xlabel('M·ª©c nhi·ªÖu (%) / Noise Level (%)')
    ax3.set_ylabel('MAE')
    ax3.set_title('MAE vs Noise Level')
    ax3.grid(True, alpha=0.3)
    
    # MAPE
    ax4.plot(results_df['noise_level']*100, results_df['MAPE'], 'mo-', linewidth=2, markersize=8)
    ax4.set_xlabel('M·ª©c nhi·ªÖu (%) / Noise Level (%)')
    ax4.set_ylabel('MAPE (%)')
    ax4.set_title('MAPE vs Noise Level')
    ax4.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('noise_experiment_results.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    return results_df

def practical_predictions(model):
    """D·ª± ƒëo√°n th·ª±c t·∫ø / Practical predictions"""
    print("\n=== D·ª∞ ƒêO√ÅN TH·ª∞C T·∫æ ===")
    print("=== PRACTICAL PREDICTIONS ===")
    
    # D·ª± ƒëo√°n cho c√°c nƒÉm kinh nghi·ªám c·ª• th·ªÉ / Predict for specific years
    test_years = [0, 2, 5, 8, 10, 15, 20]
    
    print("üí∞ D·ª± ƒëo√°n l∆∞∆°ng cho c√°c nƒÉm kinh nghi·ªám kh√°c nhau:")
    print("   Salary prediction for different years of experience:")
    
    for years in test_years:
        predicted_salary = model.predict([[years]])[0]
        print(f"   {years} nƒÉm kinh nghi·ªám ‚Üí L∆∞∆°ng d·ª± ƒëo√°n: ${predicted_salary:,.0f}")
        print(f"   {years} years experience ‚Üí Predicted salary: ${predicted_salary:,.0f}")

# ========================================
# H√ÄM CH√çNH / MAIN FUNCTION
# ========================================

def main():
    """H√†m ch√≠nh / Main function"""
    print("üöÄ B·∫ÆT ƒê·∫¶U D·ª∞ ƒêO√ÅN L∆Ø∆†NG V·ªöI LINEAR REGRESSION")
    print("üöÄ STARTING SALARY PREDICTION WITH LINEAR REGRESSION")
    
    # 1. T·∫°o d·ªØ li·ªáu l∆∞∆°ng / Create salary data
    print("\n" + "="*60)
    data = create_salary_data(n_samples=200, noise_level=0.1)
    explore_salary_data(data)
    
    # 2. Hu·∫•n luy·ªán m√¥ h√¨nh / Train model
    print("\n" + "="*60)
    model, X_train, X_test, y_train, y_test, y_pred = train_salary_model(data)
    
    # 3. So s√°nh hi·ªáu su·∫•t / Compare performance
    print("\n" + "="*60)
    metrics = compare_performance_metrics(y_test, y_pred)
    visualize_model_results(model, data, X_test, y_test, y_pred)
    
    # 4. D·ª± ƒëo√°n th·ª±c t·∫ø / Practical predictions
    print("\n" + "="*60)
    practical_predictions(model)
    
    # 5. Th·ª≠ nghi·ªám v·ªõi nhi·ªÖu kh√°c nhau / Experiment with different noise
    print("\n" + "="*60)
    noise_results = experiment_with_noise_levels()
    
    print(f"\nüéâ HO√ÄN TH√ÄNH! T·∫•t c·∫£ bi·ªÉu ƒë·ªì ƒë√£ ƒë∆∞·ª£c l∆∞u.")
    print(f"üéâ COMPLETED! All charts have been saved.")

if __name__ == "__main__":
    main() 